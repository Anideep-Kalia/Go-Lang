
> null = nil & description of the datatypes in GoLang are written after naming
> no inheritance in golang; No super or parent

> We can make 2 files inside same file but the condition is that we have to use same main function in every file
but we get compiler error using that though both codes will run so to solve this we can change the main function in one file and call that function inside main function

> Printf => only shows variable when we use %T{type of variable} or %v{any variable} etc.... but
Println => shows variable as it is no problem of %

> Any data entered in the GO is string

> whenever working with modules or packages which have crypto in it we have to deal with the numbers which are very big in size (64<)
so for that we use big.Int or big.NewInt  stuff like that

> time.Now().Format("01-02-2006 15:04:05 Monday")

> print and panic are part of Goâ€™s standard library and is not preferred as they don't provide formatting like fmt.

> fruits2[:3] => give first 3 elements of the array

> make function in Go is used specifically to create slices, maps, and channels

> println("%v",strcut) vs println(%+v,struct) => +v will provide the fields with values of struct so more details that's it 

> There is also GOTO command in GO which is just transfer of compiler from one code block to other code block

> When used defer the code before which defer is written will be stored in stack and will be executed in reverse order

> var myOnlineData map[string]interface{} => here interface is used so that we can map any kind of data with string key

> Unmarshil always take data from API in first field and take address of second variable to store and in this variable data in form of data will be stored that't why we use var myOnlineData map[string]interface{}

> to download the modules which are been imported in GO project we need to 'go mod init' -> 'go mod tidy'

> Goroutines are a key feature in Go (also called Golang) for achieving concurrency. They are lightweight threads managed by the Go runtime and allow you to run functions or methods concurrently. Goroutines enable Go programs to perform non-blocking operations,

> Execution of GO is simple just write  go in fornt of the function you want to be runned by the thread

> var wg sync.WaitGroup  & wg.Done() => used to increase the count of the threads & to reduce the number of thread count so the code can run further

> endpoint refers to URL in form of string

> There isn't any specific way to export files in GO you need to run go mod init {folder_name}  in terminal of {folder_name} and all the files in {folder_name} will be available in your local machine which can be accessed from anywhere

> Modules: 
- go mod init {folder_name} => will make the whole folder avaialable in your local machine and you can access files in folder anywhere
- go mod init github.com/username/{folder_name} => now if we do this the whole folder again will be available in whole local machine can you can access it from anywhere but
if you push the code to actual github repo mentioned then other will also can use your package as it is on github
- NOTICE: go mod init should be run in the terminal of {folder_name}



> Syntaxes:
- var {name} int ;
- {name} :=;
- map => {name}:=make(map[int]int)  
- struct => type User struct{}
- if-else same as general
